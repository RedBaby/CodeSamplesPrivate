<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	
	implements="com.chattrspace.projects.mobilesingle.mvcs.view.ui.IPhraseableUI"
	
	width="100%" 
	height="100%"
	
	borderColor="0xc0c0c0"
	borderAlpha="1"
	borderVisible="true"
	borderWeight="1"
	backgroundColor="0x0c0c0c"
	
	initialize="_onInitialize(event)"
	
	>
	
	<fx:Library>
		<!-- Place reusable visual elements here (e.g. '<fx:Definition name = "Box" ><s:Group/></fx:Definition>' -->
	</fx:Library>
	
	
	<fx:Script>
		<![CDATA[
			import com.chattrspace.projects.mobilesingle.mvcs.model.vo.PhrasesVO;
			
			import mx.events.FlexEvent;
			
			import org.osflash.signals.Signal;
			import org.osflash.signals.natives.NativeSignal;
			
			/**
			 * Copyright (C) 2011-2012 Chattrspace Inc.                    
			 * code [at] RivelloMultimediaConsulting [dot] com                                                  
			 *                                                                      
			 * Permission is hereby granted, free of charge, to any person obtaining
			 * a copy of this software and associated documentation files (the      
			 * "Software"), to deal in the Software without restriction, including  
			 * without limitation the rights to use, copy, modify, merge, publish,  
			 * distribute, sublicense, and#or sell copies of the Software, and to   
			 * permit persons to whom the Software is furnished to do so, subject to
			 * the following conditions:                                            
			 *                                                                      
			 * The above copyright notice and this permission notice shall be       
			 * included in all copies or substantial portions of the Software.      
			 *                                                                      
			 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      
			 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   
			 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
			 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR    
			 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
			 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
			 * OTHER DEALINGS IN THE SOFTWARE.                                      
			 */
			
			//--------------------------------------
			//  Imports
			//--------------------------------------
			
			
			//--------------------------------------
			//  Properties
			//--------------------------------------
			//PUBLIC GETTER/SETTERS
			/**
			 * Stores all the translation info. Nice and bindable
			 * 
			 */
			[Bindable]
			public function get phrasesVO() 						: PhrasesVO	 		{ return _phrasesVO; }
			public function set phrasesVO(aValue : PhrasesVO) 		: void 			{ 
				_phrasesVO = aValue; 
				_phrasesVOChanged.dispatch();
			}
			private var _phrasesVO : PhrasesVO;
			
			/**
			 *  Signal: Marks when the phrasesVO is updated. This is required by the IPhraseable interface
			 */		
			private var _phrasesVOChanged : Signal;
			public function get phrasesVOChanged () 				: Signal 	{ return _phrasesVOChanged; }
			
			/**
			 *  Signa: Marks adding to stage
			 */		
			public var addedToStageSignal : NativeSignal;
			
			//PUBLIC CONST
			
			
			//PRIVATE
			
			
			// --------------------------------------
			// Methods
			// --------------------------------------
			// PUBLIC
			
			
			// PRIVATE
			
			
			// --------------------------------------
			// Event Handlers
			// --------------------------------------
			/**
			 * Handles the Event: <code>ViewNavigatorEvent.VIEW_ACTIVATE</code>.
			 * 
			 * @param aEvent <code>ViewNavigatorEvent</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onInitialize(event:FlexEvent):void
			{
				//
				_phrasesVOChanged				= new Signal ();
				addedToStageSignal				= new NativeSignal (this, Event.ADDED_TO_STAGE, Event);
				
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<!-- Do Layout Here -->
	<s:layout>
		<s:VerticalLayout 
			paddingBottom	=	"0"
			paddingLeft		=	"0"
			paddingRight	=	"0"
			paddingTop		=	"0"
			/>
	</s:layout>
	
	<!-- Place visual elements here -->
	
	
</s:BorderContainer>
